// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/14/2019 10:16:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    audio_receive
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module audio_receive_vlg_sample_tst(
	aud_adcdat,
	aud_bclk,
	aud_lrc,
	rst_n,
	sampler_tx
);
input  aud_adcdat;
input  aud_bclk;
input  aud_lrc;
input  rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(aud_adcdat or aud_bclk or aud_lrc or rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module audio_receive_vlg_check_tst (
	adc_data,
	rx_done,
	sampler_rx
);
input [31:0] adc_data;
input  rx_done;
input sampler_rx;

reg [31:0] adc_data_expected;
reg  rx_done_expected;

reg [31:0] adc_data_prev;
reg  rx_done_prev;

reg [31:0] adc_data_expected_prev;
reg  rx_done_expected_prev;

reg [31:0] last_adc_data_exp;
reg  last_rx_done_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	adc_data_prev = adc_data;
	rx_done_prev = rx_done;
end

// update expected /o prevs

always @(trigger)
begin
	adc_data_expected_prev = adc_data_expected;
	rx_done_expected_prev = rx_done_expected;
end



// expected rx_done
initial
begin
	rx_done_expected = 1'bX;
end 
// expected adc_data[ 31 ]
initial
begin
	adc_data_expected[31] = 1'bX;
end 
// expected adc_data[ 30 ]
initial
begin
	adc_data_expected[30] = 1'bX;
end 
// expected adc_data[ 29 ]
initial
begin
	adc_data_expected[29] = 1'bX;
end 
// expected adc_data[ 28 ]
initial
begin
	adc_data_expected[28] = 1'bX;
end 
// expected adc_data[ 27 ]
initial
begin
	adc_data_expected[27] = 1'bX;
end 
// expected adc_data[ 26 ]
initial
begin
	adc_data_expected[26] = 1'bX;
end 
// expected adc_data[ 25 ]
initial
begin
	adc_data_expected[25] = 1'bX;
end 
// expected adc_data[ 24 ]
initial
begin
	adc_data_expected[24] = 1'bX;
end 
// expected adc_data[ 23 ]
initial
begin
	adc_data_expected[23] = 1'bX;
end 
// expected adc_data[ 22 ]
initial
begin
	adc_data_expected[22] = 1'bX;
end 
// expected adc_data[ 21 ]
initial
begin
	adc_data_expected[21] = 1'bX;
end 
// expected adc_data[ 20 ]
initial
begin
	adc_data_expected[20] = 1'bX;
end 
// expected adc_data[ 19 ]
initial
begin
	adc_data_expected[19] = 1'bX;
end 
// expected adc_data[ 18 ]
initial
begin
	adc_data_expected[18] = 1'bX;
end 
// expected adc_data[ 17 ]
initial
begin
	adc_data_expected[17] = 1'bX;
end 
// expected adc_data[ 16 ]
initial
begin
	adc_data_expected[16] = 1'bX;
end 
// expected adc_data[ 15 ]
initial
begin
	adc_data_expected[15] = 1'bX;
end 
// expected adc_data[ 14 ]
initial
begin
	adc_data_expected[14] = 1'bX;
end 
// expected adc_data[ 13 ]
initial
begin
	adc_data_expected[13] = 1'bX;
end 
// expected adc_data[ 12 ]
initial
begin
	adc_data_expected[12] = 1'bX;
end 
// expected adc_data[ 11 ]
initial
begin
	adc_data_expected[11] = 1'bX;
end 
// expected adc_data[ 10 ]
initial
begin
	adc_data_expected[10] = 1'bX;
end 
// expected adc_data[ 9 ]
initial
begin
	adc_data_expected[9] = 1'bX;
end 
// expected adc_data[ 8 ]
initial
begin
	adc_data_expected[8] = 1'bX;
end 
// expected adc_data[ 7 ]
initial
begin
	adc_data_expected[7] = 1'bX;
end 
// expected adc_data[ 6 ]
initial
begin
	adc_data_expected[6] = 1'bX;
end 
// expected adc_data[ 5 ]
initial
begin
	adc_data_expected[5] = 1'bX;
end 
// expected adc_data[ 4 ]
initial
begin
	adc_data_expected[4] = 1'bX;
end 
// expected adc_data[ 3 ]
initial
begin
	adc_data_expected[3] = 1'bX;
end 
// expected adc_data[ 2 ]
initial
begin
	adc_data_expected[2] = 1'bX;
end 
// expected adc_data[ 1 ]
initial
begin
	adc_data_expected[1] = 1'bX;
end 
// expected adc_data[ 0 ]
initial
begin
	adc_data_expected[0] = 1'bX;
end 
// generate trigger
always @(adc_data_expected or adc_data or rx_done_expected or rx_done)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected adc_data = %b | expected rx_done = %b | ",adc_data_expected_prev,rx_done_expected_prev);
	$display("| real adc_data = %b | real rx_done = %b | ",adc_data_prev,rx_done_prev);
`endif
	if (
		( adc_data_expected_prev[0] !== 1'bx ) && ( adc_data_prev[0] !== adc_data_expected_prev[0] )
		&& ((adc_data_expected_prev[0] !== last_adc_data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[0] = adc_data_expected_prev[0];
	end
	if (
		( adc_data_expected_prev[1] !== 1'bx ) && ( adc_data_prev[1] !== adc_data_expected_prev[1] )
		&& ((adc_data_expected_prev[1] !== last_adc_data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[1] = adc_data_expected_prev[1];
	end
	if (
		( adc_data_expected_prev[2] !== 1'bx ) && ( adc_data_prev[2] !== adc_data_expected_prev[2] )
		&& ((adc_data_expected_prev[2] !== last_adc_data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[2] = adc_data_expected_prev[2];
	end
	if (
		( adc_data_expected_prev[3] !== 1'bx ) && ( adc_data_prev[3] !== adc_data_expected_prev[3] )
		&& ((adc_data_expected_prev[3] !== last_adc_data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[3] = adc_data_expected_prev[3];
	end
	if (
		( adc_data_expected_prev[4] !== 1'bx ) && ( adc_data_prev[4] !== adc_data_expected_prev[4] )
		&& ((adc_data_expected_prev[4] !== last_adc_data_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[4] = adc_data_expected_prev[4];
	end
	if (
		( adc_data_expected_prev[5] !== 1'bx ) && ( adc_data_prev[5] !== adc_data_expected_prev[5] )
		&& ((adc_data_expected_prev[5] !== last_adc_data_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[5] = adc_data_expected_prev[5];
	end
	if (
		( adc_data_expected_prev[6] !== 1'bx ) && ( adc_data_prev[6] !== adc_data_expected_prev[6] )
		&& ((adc_data_expected_prev[6] !== last_adc_data_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[6] = adc_data_expected_prev[6];
	end
	if (
		( adc_data_expected_prev[7] !== 1'bx ) && ( adc_data_prev[7] !== adc_data_expected_prev[7] )
		&& ((adc_data_expected_prev[7] !== last_adc_data_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[7] = adc_data_expected_prev[7];
	end
	if (
		( adc_data_expected_prev[8] !== 1'bx ) && ( adc_data_prev[8] !== adc_data_expected_prev[8] )
		&& ((adc_data_expected_prev[8] !== last_adc_data_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[8] = adc_data_expected_prev[8];
	end
	if (
		( adc_data_expected_prev[9] !== 1'bx ) && ( adc_data_prev[9] !== adc_data_expected_prev[9] )
		&& ((adc_data_expected_prev[9] !== last_adc_data_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[9] = adc_data_expected_prev[9];
	end
	if (
		( adc_data_expected_prev[10] !== 1'bx ) && ( adc_data_prev[10] !== adc_data_expected_prev[10] )
		&& ((adc_data_expected_prev[10] !== last_adc_data_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[10] = adc_data_expected_prev[10];
	end
	if (
		( adc_data_expected_prev[11] !== 1'bx ) && ( adc_data_prev[11] !== adc_data_expected_prev[11] )
		&& ((adc_data_expected_prev[11] !== last_adc_data_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[11] = adc_data_expected_prev[11];
	end
	if (
		( adc_data_expected_prev[12] !== 1'bx ) && ( adc_data_prev[12] !== adc_data_expected_prev[12] )
		&& ((adc_data_expected_prev[12] !== last_adc_data_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[12] = adc_data_expected_prev[12];
	end
	if (
		( adc_data_expected_prev[13] !== 1'bx ) && ( adc_data_prev[13] !== adc_data_expected_prev[13] )
		&& ((adc_data_expected_prev[13] !== last_adc_data_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[13] = adc_data_expected_prev[13];
	end
	if (
		( adc_data_expected_prev[14] !== 1'bx ) && ( adc_data_prev[14] !== adc_data_expected_prev[14] )
		&& ((adc_data_expected_prev[14] !== last_adc_data_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[14] = adc_data_expected_prev[14];
	end
	if (
		( adc_data_expected_prev[15] !== 1'bx ) && ( adc_data_prev[15] !== adc_data_expected_prev[15] )
		&& ((adc_data_expected_prev[15] !== last_adc_data_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[15] = adc_data_expected_prev[15];
	end
	if (
		( adc_data_expected_prev[16] !== 1'bx ) && ( adc_data_prev[16] !== adc_data_expected_prev[16] )
		&& ((adc_data_expected_prev[16] !== last_adc_data_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[16] = adc_data_expected_prev[16];
	end
	if (
		( adc_data_expected_prev[17] !== 1'bx ) && ( adc_data_prev[17] !== adc_data_expected_prev[17] )
		&& ((adc_data_expected_prev[17] !== last_adc_data_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[17] = adc_data_expected_prev[17];
	end
	if (
		( adc_data_expected_prev[18] !== 1'bx ) && ( adc_data_prev[18] !== adc_data_expected_prev[18] )
		&& ((adc_data_expected_prev[18] !== last_adc_data_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[18] = adc_data_expected_prev[18];
	end
	if (
		( adc_data_expected_prev[19] !== 1'bx ) && ( adc_data_prev[19] !== adc_data_expected_prev[19] )
		&& ((adc_data_expected_prev[19] !== last_adc_data_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[19] = adc_data_expected_prev[19];
	end
	if (
		( adc_data_expected_prev[20] !== 1'bx ) && ( adc_data_prev[20] !== adc_data_expected_prev[20] )
		&& ((adc_data_expected_prev[20] !== last_adc_data_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[20] = adc_data_expected_prev[20];
	end
	if (
		( adc_data_expected_prev[21] !== 1'bx ) && ( adc_data_prev[21] !== adc_data_expected_prev[21] )
		&& ((adc_data_expected_prev[21] !== last_adc_data_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[21] = adc_data_expected_prev[21];
	end
	if (
		( adc_data_expected_prev[22] !== 1'bx ) && ( adc_data_prev[22] !== adc_data_expected_prev[22] )
		&& ((adc_data_expected_prev[22] !== last_adc_data_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[22] = adc_data_expected_prev[22];
	end
	if (
		( adc_data_expected_prev[23] !== 1'bx ) && ( adc_data_prev[23] !== adc_data_expected_prev[23] )
		&& ((adc_data_expected_prev[23] !== last_adc_data_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[23] = adc_data_expected_prev[23];
	end
	if (
		( adc_data_expected_prev[24] !== 1'bx ) && ( adc_data_prev[24] !== adc_data_expected_prev[24] )
		&& ((adc_data_expected_prev[24] !== last_adc_data_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[24] = adc_data_expected_prev[24];
	end
	if (
		( adc_data_expected_prev[25] !== 1'bx ) && ( adc_data_prev[25] !== adc_data_expected_prev[25] )
		&& ((adc_data_expected_prev[25] !== last_adc_data_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[25] = adc_data_expected_prev[25];
	end
	if (
		( adc_data_expected_prev[26] !== 1'bx ) && ( adc_data_prev[26] !== adc_data_expected_prev[26] )
		&& ((adc_data_expected_prev[26] !== last_adc_data_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[26] = adc_data_expected_prev[26];
	end
	if (
		( adc_data_expected_prev[27] !== 1'bx ) && ( adc_data_prev[27] !== adc_data_expected_prev[27] )
		&& ((adc_data_expected_prev[27] !== last_adc_data_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[27] = adc_data_expected_prev[27];
	end
	if (
		( adc_data_expected_prev[28] !== 1'bx ) && ( adc_data_prev[28] !== adc_data_expected_prev[28] )
		&& ((adc_data_expected_prev[28] !== last_adc_data_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[28] = adc_data_expected_prev[28];
	end
	if (
		( adc_data_expected_prev[29] !== 1'bx ) && ( adc_data_prev[29] !== adc_data_expected_prev[29] )
		&& ((adc_data_expected_prev[29] !== last_adc_data_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[29] = adc_data_expected_prev[29];
	end
	if (
		( adc_data_expected_prev[30] !== 1'bx ) && ( adc_data_prev[30] !== adc_data_expected_prev[30] )
		&& ((adc_data_expected_prev[30] !== last_adc_data_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[30] = adc_data_expected_prev[30];
	end
	if (
		( adc_data_expected_prev[31] !== 1'bx ) && ( adc_data_prev[31] !== adc_data_expected_prev[31] )
		&& ((adc_data_expected_prev[31] !== last_adc_data_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_data[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_data_expected_prev);
		$display ("     Real value = %b", adc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_data_exp[31] = adc_data_expected_prev[31];
	end
	if (
		( rx_done_expected_prev !== 1'bx ) && ( rx_done_prev !== rx_done_expected_prev )
		&& ((rx_done_expected_prev !== last_rx_done_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_done_expected_prev);
		$display ("     Real value = %b", rx_done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_done_exp = rx_done_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module audio_receive_vlg_vec_tst();
// constants                                           
// general purpose registers
reg aud_adcdat;
reg aud_bclk;
reg aud_lrc;
reg rst_n;
// wires                                               
wire [31:0] adc_data;
wire rx_done;

wire sampler;                             

// assign statements (if any)                          
audio_receive i1 (
// port map - connection between master ports and signals/registers   
	.adc_data(adc_data),
	.aud_adcdat(aud_adcdat),
	.aud_bclk(aud_bclk),
	.aud_lrc(aud_lrc),
	.rst_n(rst_n),
	.rx_done(rx_done)
);

// rst_n
initial
begin
	rst_n = 1'b1;
end 

// aud_bclk
always
begin
	aud_bclk = 1'b0;
	aud_bclk = #10000 1'b1;
	#10000;
end 

// aud_adcdat
initial
begin
	aud_adcdat = 1'b0;
	aud_adcdat = #39060000 1'b1;
	aud_adcdat = #20000 1'b0;
end 

// aud_lrc
initial
begin
	aud_lrc = 1'b1;
	aud_lrc = #20940000 1'b0;
	aud_lrc = #18100000 1'b1;
end 

audio_receive_vlg_sample_tst tb_sample (
	.aud_adcdat(aud_adcdat),
	.aud_bclk(aud_bclk),
	.aud_lrc(aud_lrc),
	.rst_n(rst_n),
	.sampler_tx(sampler)
);

audio_receive_vlg_check_tst tb_out(
	.adc_data(adc_data),
	.rx_done(rx_done),
	.sampler_rx(sampler)
);
endmodule

