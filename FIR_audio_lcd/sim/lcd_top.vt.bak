// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/12/2019 09:40:18"
                                                                                
// Verilog Test Bench template for design : lcd_top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module lcd_top_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk_10m;
reg clk_50m;
reg [15:0] fft_data;
reg fft_eop;
reg fft_sop;
reg fft_vaild;
reg rst_n;
// wires                                               
wire lcd_bl;
wire lcd_de;
wire lcd_hs;
wire lcd_pcll;
wire [15:0]  lcd_rgb;
wire lcd_rs;
wire lcd_vs;

// assign statements (if any)                          
lcd_top i1 (
// port map - connection between master ports and signals/registers   
	.clk_10m(clk_10m),
	.clk_50m(clk_50m),
	.fft_data(fft_data),
	.fft_eop(fft_eop),
	.fft_sop(fft_sop),
	.fft_vaild(fft_vaild),
	.lcd_bl(lcd_bl),
	.lcd_de(lcd_de),
	.lcd_hs(lcd_hs),
	.lcd_pcll(lcd_pcll),
	.lcd_rgb(lcd_rgb),
	.lcd_rs(lcd_rs),
	.lcd_vs(lcd_vs),
	.rst_n(rst_n)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
rst_n = 0;
#100
rst_n = 1;
#10000                                                       
// --> end                                             
$display("Running testbench");                       
end
                                                    
always  #10 clk_50m = ~clk_50m;
always  #50 clk_10m = ~clk_10m;
                                               
always @ (posedge clk_50m)begin
  if(fft_data<128)
  fft_data <= fft_data +1;
  else
  fft_data  <=0;
  
assign fft_sop    = (fft_data==15'd1)   ? 1'b1 : 1'b0; //在第一个数据为，生成sop信号，
assign fft_eop    = (fft_data==15'd128) ? 1'b0 : 1'b0; //在最后一个数据位，生成eop信号
assign fft_valid	=	(fft_data>15'd1)&&(fft_data<15'd128)?	1'b1 : 1'b0; //在1和128之间生成vaild信号
  
  
endmodule

